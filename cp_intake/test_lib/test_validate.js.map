{"version":3,"sources":["../test/test_validate.js"],"names":[],"mappings":"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","file":"test_validate.js","sourcesContent":["import { expect } from 'chai';\nimport { assert } from 'chai';\nimport { should } from 'chai';\nimport { ODNS_Validator } from '../lib/validate';\nimport { validateBody } from '../lib/validate';\n\nvar good_obj = '{\"protocolVersion\":\"1.0a\",\"providerName\":\"Security Platform\",\"eventTime\":\"2014-07-14T21:38:52.000Z\",\"alertTime\":\"2016-04-17T18:45:42.255Z\",\"dstUrl\":\"http://alejandrin.biz\",\"dstDomain\":\"alejandrin.biz\",\"deviceId\":\"147.80.118.52\",\"deviceVersion\":\"This is Check Points software version R77.10 - Build 243\",\"dstIp\":\"228.129.60.153\",\"eventSeverity\":\"4\",\"eventType\":\"URL reputation\",\"eventDescription\":\"Communication with C&C site\",\"eventHash\":\"[0x30c5e8f1,0xb,0xf4da2510,0x2eaa7e55]\",\"src\":\"80.34.229.243\"}';\n\n\ndescribe('validate', () => {\n  it(`ODNS_Validator should successfully validate a good object`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.be.true;\n  });\n\n  it(`ODNS_Validator should successfully validate object with additional fields`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    parsed_json[\"a_new_field\"] = \"some new data\";\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.be.true;\n  });\n\n  it(`ODNS_Validator should not validate without deviceVersion`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"deviceVersion\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;\n  });\n\n  it(`ODNS_Validator should not validate without eventTime`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"eventTime\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;  });\n\n  it(`ODNS_Validator should not validate without alertTime`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"alertTime\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;\n  });\n\n  it(`ODNS_Validator should not validate without dstDomain`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"dstDomain\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;\n  });\n\n  it(`ODNS_Validator should not validate without dstUrl`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"dstUrl\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;\n  });\n\n  it(`ODNS_Validator should not validate without protocolVersion`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"protocolVersion\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;\n  });\n\n  it(`ODNS_Validator should not validate without providerName`, () => {\n    let parsed_json = JSON.parse(good_obj);\n    delete parsed_json[\"providerName\"]; //Erase a few required fields\n    let val_results = validateBody(parsed_json, ODNS_Validator);\n\n    expect(val_results.valid).to.not.be.true;\n  });\n});\n"]}